@import '../theme';
@import '../mixins';


@mixin formStyleBase($fontSize, $lineHeight, $labelFontSize: 1.3rem) {
  @include modifyBEMSelector((modifiers: (inline: null))) {
    display: inline-block;
  }

  @include modifyBEMSelector((element: 'row')) {
    margin-bottom: 1rem;
    line-height: $lineHeight;
    vertical-align: top;
    display: flex;

    //async styles
    /*@include modifyBEMSelector((modifiers: (asyncValidation: 'pending'))) {
      background: #99F;
    }

    @include modifyBEMSelector((modifiers: (asyncValidation: 'failed'))) {
      background: $cError;
    }

    @include modifyBEMSelector((modifiers: (asyncValidation: 'success'))) {
      background: #9F9;
    }*/
  }

  @include modifyBEMSelector((element: 'labelHolder')) {
    line-height: $lineHeight;
    flex-basis: 15rem;
    flex-grow: 0;
    display: inline-block;
    padding-right: 1rem;
    vertical-align: inherit;
  }

  @include modifyBEMSelector((element: 'label')) {
    font-size: $labelFontSize;//$fontSize;
    line-height: ($fontSize * 1.2);
    padding-top: ($lineHeight - ($fontSize*1.2))/2;
    //line-height: $lineHeight;
    vertical-align: inherit;
    display: inline-block;
  }

  @include modifyBEMSelector((element: 'fieldHolder')) {
    line-height: $lineHeight;
    flex-grow: 1;
    flex-basis: 15rem;
    display: inline-block;
    vertical-align: inherit;
    position: relative;

    @include modifyBEMSelector((modifiers: (cols: 1))) {
      //width: 30rem;
    }

    /*@include modifyBEMSelector((modifiers: (width: 80))) {
      flex-basis: 12rem;
    }*/
  }

  @include modifyBEMSelector((element: 'input')) {
    vertical-align: inherit;
    font-family: inherit;

    @include modifyBEMSelector((modifiers: (style: 'textfield'))) {
      width:100%;
      $borderWidth: 0.1rem;
      font-size: $fontSize;
      line-height: $lineHeight - ($borderWidth * 2);
      padding: 0 0.3rem;
      border: $borderWidth solid #CCC;
      margin: 0;
      background: $pallet0;


      @include modifyBEMSelector((modifiers: (size: 'small'))) {
        width: 6rem;
      }

      @include modifyBEMSelector((modifiers: (type: 'tokeniser'))) {
        height: auto;

        @include modifyBEMSelector((modifiers: (focussed: null))) {
          cursor: text;
        }
      }
    }

    @include modifyBEMSelector((modifiers: (type: 'ipAddress'))) {
      text-transform: lowercase;
    }

    @include modifyBEMSelector((modifiers: (type: 'checkbox'))) {
      @include themeCheckbox($size: 1.2rem, $lineHeight: 1.4rem, $verticalAlign:inherit, $color: inherit);
    }

    @include modifyBEMSelector((modifiers: (type: 'checkboxes'))) {
      @include themeCheckbox($size: 1.2rem, $lineHeight: 1.4rem, $verticalAlign:inherit, $color: inherit);
    }

    //optional modifiers
    @include modifyBEMSelector((modifiers: (size: 'small'))) {
      width: 50%;
    }

    @include modifyBEMSelector((modifiers: (size: 'verySmall'))) {
      width: 6rem;
    }

    @include modifyBEMSelector((modifiers: (uppercase: null))) {
      text-transform: uppercase;
    }
  }

  @include modifyBEMSelector((element: 'fieldWrapper')) {
    @include modifyBEMSelector((modifiers: (type: 'autocomplete'))) {
      position: relative;
      display: inline-block;
      vertical-align: top;
    }
  }


  //autocomplete
  @include modifyBEMSelector((element: 'autocompleteItems')) {
    cursor: pointer;
    position: absolute;
    z-index: 3;
    left: 0;
    right: 0;
    top: 100%;
    max-height: 11.5rem;
    overflow-x: hidden;
    overflow-y: auto;
    background: #FFF;
  }

  @include modifyBEMSelector((element: 'autocompleteItem')) {
    background: #EEE;
    padding: 0 $basePadding*0.5 0 (($basePadding*0.5) + 0.5rem);

    @include modifyBEMSelector((modifiers: (selected: null))) {
      background: #AAA;
    }
  }

  //Tokeniser

  @include modifyBEMSelector((element: 'realInput')) {
    border: 0;
    margin: 0;
    background: transparent;
    width: auto;

    //Needed to fix chrome autofill yellow
    &:-webkit-autofill {
      box-shadow: 0 0 0 30px white inset;
    }

    @include modifyBEMSelector((modifiers: (oneItemPerLine: null))) {
      clear: left;
      display: block;
      margin-top: 0.3rem;
    }


    &:not(:focus) {
      cursor: pointer;
    }
  }

  @include modifyBEMSelector((element: 'token')) {
    display: inline-block;
    margin-right: $basePadding/4;
    position: relative;
    font-size: 1.3rem;
    border: 0.1rem solid $pallet6;
    line-height: 1;
    padding: 0 0 0 $basePadding/4;
    background: $pallet4;
    color: $pallet0;
    top: -0.1rem;

    @include modifyBEMSelector((element: 'token-remove')) {
      border: 0;
      background: 0;
      padding: 0.1rem $basePadding/4;
      @include themeTextInteraction();
    }

    @include modifyBEMSelector((modifiers: (oneItemPerLine: null))) {
      float: left;
      clear: left;
      margin-top: $basePadding/4;
      font-size: 1.5rem;
    }

    @include modifyBEMSelector((modifiers: (isInvalid: null))) {
      background: $cError;
    }
  }

  @include modifyBEMSelector((element: 'filteredOptions')) {
    cursor: pointer;
    position: absolute;
    z-index: 3;
    left: 0;
    right: 0;
    top: 100%;
    max-height: 11.5rem;
    overflow-x: hidden;
    overflow-y: auto;
    background: #FFF;
  }

  @include modifyBEMSelector((element: 'filteredOptions-option')) {
    background: #EEE;
    padding: 0 $basePadding*0.5 0 (($basePadding*0.5) + 0.5rem);
    border: 0;
    display: block;
    width: 100%;
    text-align: left;
    @include  themeBlockInteraction($mouseColour: $pallet24);

    @include modifyBEMSelector((modifiers: (selected: null))) {
      background: $pallet13;
      color: $pallet0;
    }
  }

  //checkboxes
  @include modifyBEMSelector((element: 'checkboxes')) {
    @include modifyBEMSelector((element: '&-legend')) {
      font-size: $labelFontSize;//$fontSize;
      line-height: ($fontSize * 1.2);
      padding-top: ($lineHeight - ($fontSize*1.2))/2;
      vertical-align: inherit;
      display: inline-block;
      margin-bottom: $basePadding/2;
    }

    @include modifyBEMSelector((element: '&-checkbox')) {
      display: block;
      white-space: nowrap;
      vertical-align: text-top;
      margin-bottom: $basePadding/4;
    }

    @include modifyBEMSelector((element: '&-label')) {
      display: inline-block;
      font-size: 1.3rem;
      line-height: 1.1;
      white-space: normal;
      vertical-align: inherit;
      cursor: pointer;
      max-width: calc(100% - 2.5rem);
    }
  }

  //Between
  @include modifyBEMSelector((element: 'between')) {
    @include modifyBEMSelector((element: '&-and')) {
      font-size: 1.3rem;
      margin: 0 $basePadding/2;
    }
  }

  //hours
  @include modifyBEMSelector((element: 'hours')) {
    overflow: hidden;
    margin-right: -$basePadding/2;

    @include modifyBEMSelector((element: '&-legend')) {
      font-size: $labelFontSize;//$fontSize;
      line-height: ($fontSize * 1.2);
      padding-top: ($lineHeight - ($fontSize*1.2))/2;
      vertical-align: inherit;
      display: inline-block;
    }

    @include modifyBEMSelector((element: '&-period')) {
      width: 50%;
      float: left;
      padding: $basePadding/2;
      background: $pallet25;

      @include modifyBEMSelector((modifiers: (val: am))) {
        border-right: $basePadding/4 solid $pallet0;
      }

      @include modifyBEMSelector((modifiers: (val: pm))) {
        border-left: $basePadding/4 solid $pallet0;
      }

      @include modifyBEMSelector((element: '&-legend')) {
        margin-bottom: 1em;
        position: relative;
        top: 1em;
      }

      @include modifyBEMSelector((element: '&-hoursHolder')) {
        display: flex;
        flex-flow: row wrap;
      }

      @include modifyBEMSelector((element: '&-hourHolder')) {
        display: inline-block;
        padding: $basePadding/4 $basePadding $basePadding/4 0;
        flex-basis: 7rem;
      }
    }

    @include modifyBEMSelector((element: '&-hour')) {
      @include modifyBEMSelector((element: '&-label')) {
        padding: $basePadding/4 0.2rem;
        cursor: pointer;

        &:hover {
          color: $pallet5;
        }

        :checked + & {
          background: $pallet4;
          color: $pallet0;

          &:hover {
            color: $pallet25;
          }
        }

        .focus_keyboard :focus + &{
          color: $pallet13;
        }

        .focus_keyboard :checked:focus + &{
          color: $pallet0;
          background: $pallet13;
        }

        @include modifyBEMSelector((modifiers: (disabled: null))) {
          color: $pallet3;
          pointer-events: none;
          cursor: default;
        }
      }

      @include modifyBEMSelector((element: '&-input')) {
        @include offscreen;
      }
    }

    @include modifyBEMSelector((element: '&-selectBtns')) {
      border-top: $basePadding/2 solid transparent;
      clear: both;
    }

    @include modifyBEMSelector((element: '&-selectAll')) {
      @include themeBtn($size: small, $light: true);
      margin-right: $basePadding/2;
    }

    @include modifyBEMSelector((element: '&-deselectAll')) {
      @include themeBtn($size: small, $light: true);
      margin-right: $basePadding/2;
    }
  }

  @include modifyBEMSelector((element: 'info')) {
    display: block;
    font-size: $fontSize - 0.5rem;
    color: #666;
    line-height: 1.2;
    padding-top: 0.2rem;
  }

  @include modifyBEMSelector((element: 'errors')) {
    background: $cError;
    display: block;
    color: $pallet0;
    line-height: 1.2;
    padding: $basePadding/4 $basePadding/2;
    margin-top: -0.1rem;
    position: absolute;
    z-index: 2;
    left: 0;
    max-width: 28rem;
    font-size: 1.3rem;

    @include modifyBEMSelector((modifiers: (type: 'hours'))) {
      //left: $basePadding;
      position: static;
      display: inline;
      margin-left: $basePadding/4;
    }
  }

  @include modifyBEMSelector((element: 'actions')) {
    margin-top: $basePadding/2;
    text-align: right;
  }
}

@mixin formStyleStandard($fontSize, $lineHeight, $labelFontSize: 1.3rem) {
  @include formStyleBase($fontSize: $fontSize, $lineHeight: $lineHeight, $labelFontSize: $labelFontSize);

  font-size: $fontSize;
  line-height: $lineHeight;

  @include modifyBEMSelector((element: 'input', modifiers: (style: 'textfield'))) {
    @include blockInput($lineHeight: $lineHeight);

    @include modifyBEMSelector((element: 'input', modifiers: (oneItemPerLine: null))) {
      height: auto;
      min-height: $lineHeight;
    }

    @include modifyBEMSelector((element: 'input', modifiers: (type: 'textarea'))) {
      height: auto;
      vertical-align: top;
    }
  }

  @include modifyBEMSelector((element: 'input', modifiers: (type: 'select'))) {
    @include blockInput($lineHeight: $lineHeight);
    max-width: calc(100% + 3rem);
    width: calc(100% + 3rem);
    padding-right: ($basePadding*0.5) + 2.5rem + 3rem;
    appearance: none;
    ms-appearance: none;
    vertical-align: top;
    font-size: $fontSize;
  }

  @include modifyBEMSelector((element: 'fieldWrapper')) {
    vertical-align: top;

    @include modifyBEMSelector((modifiers: (style: 'select'))) {
      @include blockElementWrapper;

      @include modifyBEMSelector((modifiers: (disabled: null))) {
        opacity: 0.5;
        pointer-events: none;
      }
    }

    @include modifyBEMSelector((modifiers: (style: 'textfield'))) {
      @include blockElementWrapper;

      @include modifyBEMSelector((modifiers: (disabled: null))) {
        opacity: 0.5;
        pointer-events: none;
      }
    }
  }

  @include modifyBEMSelector((element: 'fieldBtn')) {
    @include themeBtn($size: 'small', $light: true);
    margin-left: ($basePadding/4)+0.5rem;
    vertical-align: top;
  }

  @include modifyBEMSelector((element: 'input', modifiers: (type: 'select'))) {
    @include modifyBEMSelector((modifiers: (standalone: null))) {
      min-width: 5rem;
      width: auto;
      max-width: none;
      padding-right: 3rem;


      &:focus {
        color: inherit;
        background: $pallet30;

        .focus_keyboard & {
          color: $cKeyboardFocus;
        }
      }
    }
  }

  @include modifyBEMSelector((element: 'input', modifiers: (type: 'text'))) {
    @include modifyBEMSelector((modifiers: (standalone: null))) {
      &:focus {
        color: inherit;
        background: $pallet30;

        .focus_keyboard & {
          color: $cKeyboardFocus;
        }
      }
    }
  }

  //
  //form-input_type_checkbox
  @include modifyBEMSelector((element: 'input', modifiers: (type: 'checkbox'))) {
    @include themeCheckbox();//$size: $checkboxSize, $lineHeight: 1.4rem, $verticalAlign:inherit, $color: inherit
  }
}



@mixin blockInput($lineHeight) {
  padding: 0 $basePadding/4;//changed from /2
  border-radius: 0;
  line-height: inherit;
  height: $lineHeight;
  border: 0.1rem solid #CCC;
  border-left: 0;
  border-right: 0;
  width: 100%;

  &:not(:focus) {
    cursor: pointer;
  }

  //Needed to fix chrome autofill yellow
  &:-webkit-autofill {
    box-shadow: 0 0 0 30px white inset;
  }

  @include modifyBEMSelector((modifiers: (valid: 'invalid'))) {
    border-color: $cError;
  }

  @include modifyBEMSelector((modifiers: (error: null))) {
    border-color: $cError;
    color: $cError;
  }

  @include modifyBEMSelector((modifiers: (valid: 'valid'))) {
    border-color: $cSuccess;
  }

  @include modifyBEMSelector((modifiers: (focussed: null))) {
    color: inherit;
    background: $pallet30;

    .focus_keyboard & {
      border-color: $cKeyboardFocus;
    }
  }
}

@mixin blockElementWrapper() {
  display: inline-block;
  position: relative;
  padding-left: 0.5rem;
  background: $pallet4;
  line-height: inherit;
  max-width: 100%;
  //overflow: hidden; //Can't be overflow hidden - why did I need this?
  border-right: 0.1rem solid #CCC;

  @include modifyBEMSelector((modifiers: (valid: 'invalid'))) {
    background: $cError;
    border-color: $cError;
  }

  @include modifyBEMSelector((modifiers: (error: null))) {
    background: $cError;
    border-color: $cError;
    color: $cError;
  }

  @include modifyBEMSelector((modifiers: (valid: 'valid'))) {
    background: $cSuccess;
    border-color: $cSuccess;
  }

  @include modifyBEMSelector((modifiers: (focussed: null))) {
    color: inherit;

    .focus_keyboard & {
      background: $cKeyboardFocus;
      border-color: $cKeyboardFocus;
    }
  }

  @include modifyBEMSelector((modifiers: (type: 'select'))) {
    overflow: hidden;
    &:after {
      @include triangle('bottom', $color: currentcolor, $size: 1.2rem, $size2: 0.7rem);

      position: absolute;
      right: 1.2rem;
      top: 50%;
      margin-top: -0.3rem;
      pointer-events: none;
    }
  }

  @include modifyBEMSelector((modifiers: (hasFieldTooltip: null))) {
    max-width: calc(100% - 1em - #{($basePadding/2)});
    margin-right: $basePadding/2;
  }
}






.form_theme_simple {
  $fontSize: 1.65rem;
  $lineHeight: 2.8rem;

  @include formStyleStandard($fontSize: $fontSize, $lineHeight: $lineHeight);

  @include modifyBEMSelector((element: 'row')) {
    margin-bottom: 0;
  }

  @include modifyBEMSelector((element: 'labelHolder')) {
    width: auto;
  }
}

.form_theme_search {
  $fontSize: 1.65rem;
  $lineHeight: 2.8rem;

  @include formStyleStandard($fontSize: $fontSize, $lineHeight: $lineHeight, $labelFontSize: $fontSize);

  vertical-align: middle;

  @include modifyBEMSelector((element: 'row')) {
    margin-bottom: 0;
    position: relative;
  }

  @include modifyBEMSelector((element: 'labelHolder')) {
    width: auto;
    flex-basis: auto;
  }

  @include modifyBEMSelector((element: 'label')) {
    vertical-align: middle;
  }

  @include modifyBEMSelector((element: 'fieldHolder')) {
    width: 20rem;
    flex-basis: auto;
  }

  @include modifyBEMSelector((element: 'fieldWrapper', modifiers: (style: 'textfield'))) {
    border-right-color: #555;
  }

  @include modifyBEMSelector((element: 'input', modifiers: (style: 'textfield'))) {
    padding: 1.9rem $basePadding/2;
    padding-right: 3.6rem;
    border-color: #555;
  }
}

.form-search-icon {
  position: absolute;
  right: 1rem;
  top: 50%;
  font-size: 2.5rem;
  color: $pallet5;
  margin-top: -0.5em;
  pointer-events: none;
}






//default theme styles
.form_theme_default {

  $fontSize: 1.65rem;
  $lineHeight: 2.8rem;

  @include formStyleStandard($fontSize: $fontSize, $lineHeight: $lineHeight);

  @include modifyBEMSelector((element: 'columns')) {
    display: flex;
    flex-flow: row wrap;
    justify-content: space-between;
    align-items: stretch;//flex-start;
    margin-right: -$basePadding/2;
  }

  @include modifyBEMSelector((element: 'column')) {
    background: $pallet0;
    padding: $basePadding/2 $basePadding/2 0 $basePadding/2;
    margin: 0 $basePadding/2 $basePadding/2 0;
    flex-grow: 1;

    @include modifyBEMSelector((modifiers: (column: 1, layout: '66_33'))) {
      flex-basis: calc(66.6% - #{$basePadding/2});
    }

    @include modifyBEMSelector((modifiers: (column: 2, layout: '66_33'))) {
      flex-basis: calc(33.4% - #{$basePadding/2});
      background: $pallet25;
    }
  }


  @include modifyBEMSelector((element: 'actions')) {
    margin: 0 (-$basePadding/2) (-$basePadding/2) 0;

    @include modifyBEMSelector((modifiers: (hasColumns: null))) {
      background: $pallet0;
      margin: 0;
      padding: $basePadding/2 0 0 $basePadding/2;
      flex-basis: 100%;
    }
  }


  @include modifyBEMSelector((element: 'action')) {
    @include themeBtn();

    margin-bottom: $basePadding/2;
    margin-right: $basePadding/2;

    @include modifyBEMSelector((modifiers: (size: small))) {
      @include themeBtn($size: 'small');
    }

    @include modifyBEMSelector((modifiers: (size: large))) {
      @include themeBtn($size: 'large');
    }

    @include modifyBEMSelector((modifiers: (secondary: null))) {
      @include themeBtn($light: true);

      @include modifyBEMSelector((modifiers: (size: small))) {
        @include themeBtn($light: true, $size: 'small');
      }

      @include modifyBEMSelector((modifiers: (size: large))) {
        @include themeBtn($light: true, $size: 'large');
      }
    }
  }
}

//login form theme

.form {
  &_theme_login {
    text-align: left;
  }

  &-row {
    &_theme_login {
      margin: 0 0 $basePadding;
      position: relative;
    }
  }

  &-labelHolder_theme_login {
    width: auto;
    display: block;
    padding: 0;
  }

  &-label_theme_login {
    position: absolute;
    left: 2.5rem;
    top: 50%;
    color: $pallet6;
    font-size: 2.5rem;
    opacity: 0.6;
    transform: translate(-50%,-50%);

    >span{
      @include offscreen;
    }

    @include forBreakpoint('mobile') {
      left: 1.8rem;
    }
  }

  &-label_theme_login#{&}-label_error {
    color: #FFF;
  }

  &-label_theme_login#{&}-label_focussed {
    opacity: 1;
    color: $pallet6;
  }

  &-fieldHolder {
    &_cols_1#{&}_theme_login {
      width: auto;
      display: block;
    }
  }

  &-input {
    &_style_textfield#{&}_theme_login {
      border: 0;
      width: 100%;
      font-size: 2.1rem;
      padding: 1.8rem 1.8rem 1.8rem 4.8rem;
      color: $pallet6;
      outline: none;

      &[disabled] {
        color: rgba($pallet6, 0.7);
        background-color: #FFF;
      }

      @include themeBlockInteraction($mouseFocus: true);

      @mixin placeholder() {
        opacity: 0.6;
        color: inherit;
      }

      &::-webkit-input-placeholder { // Chrome/Opera/Safari
        @include placeholder;
      }
      &::-moz-placeholder { // Firefox 19+
        @include placeholder;
      }
      &:-ms-input-placeholder { // IE 10+
        @include placeholder;
      }
      &:-moz-placeholder { // Firefox 18-
        @include placeholder;
      }
      &::placeholder {//standard
        @include placeholder;
      }

      @include forBreakpoint('mobile') {
        font-size: $basePadding;
        padding: 1rem 1rem 1rem 3.8rem;
      }
    }

    &_style_textfield#{&}_theme_login#{&}_hasCapslockWarning {
      padding-right: 11.5rem;

      @include forBreakpoint('mobile') {
        padding-right: 7.5rem;
      }
    }


    &_style_textfield#{&}_theme_login#{&}_error {
      color: #FFF;
    }

    &_style_textfield#{&}_theme_login#{&}_error#{&}_focussed {
      color: $pallet6;
    }
  }

  &-capslockWarning_theme_login {
    color: $pallet18;
    font-size: 3.1rem;
    position: absolute;
    right: 2rem;
    top: 50%;
    transform: translate(0,-50%);

    @include forBreakpoint('mobile') {
      font-size: $basePadding;
      right: 1rem;
    }
  }

  &-capslockWarning-text_theme_login {
    font-size: 2rem;
    padding-left: 0.5rem;

    @include forBreakpoint('mobile') {
      font-size: 1.4rem;
    }
  }

  &-actions_theme_login {

    @include upToBreakpoint('phablet') {
      padding: ($basePadding /2) 0.2rem;
      text-align: center;
      margin-top: 1.5rem;
    }
  }

  &-action_theme_login {
    $border: $pallet0;
    $borderWidth: 0.1rem;
    $background: $pallet4;

    border: $borderWidth solid $border;
    background: $background;
    color: $pallet0;
    line-height: 1.2;
    padding: ($basePadding /2) $basePadding*2;
    font-size: 2.1rem;

    &[disabled] {
      color: rgba(#FFF, 0.7);
      cursor: progress;
    }

    @include themeBlockInteraction($mouseColour: lighten($pallet5, 10%));

    @include forBreakpoint('mobile') {
      padding: 1.5rem 2.5rem;
      font-size: $basePadding;
    }

    margin: 0;
    text-transform: uppercase;

    @include forBreakpoint('mobile') {
      margin: 0;
    }
  }
}
